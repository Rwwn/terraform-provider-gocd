// ----------------------------------------------------------------------------
//
//	***     TERRAGEN GENERATED CODE    ***    TERRAGEN GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//	This file was auto generated by Terragen.
//	This autogenerated code has to be enhanced further to make it fully working terraform-provider.
//
//	Get more information on how terragen works.
//	https://github.com/nikhilsbhat/terragen
//
// ----------------------------------------------------------------------------
//
//nolint:gocritic
package provider

import (
	"context"
	"fmt"
	"log"

	"github.com/nikhilsbhat/gocd-sdk-go"
	"github.com/nikhilsbhat/terraform-provider-gocd/pkg/utils"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func resourceAuthConfig() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceAuthConfigCreate,
		ReadContext:   resourceAuthConfigRead,
		DeleteContext: resourceAuthConfigDelete,
		UpdateContext: resourceAuthConfigUpdate,
		Schema: map[string]*schema.Schema{
			"profile_id": {
				Type:        schema.TypeString,
				Required:    true,
				Computed:    false,
				ForceNew:    true,
				Description: "The identifier of the authorization configuration.",
			},
			"plugin_id": {
				Type:        schema.TypeString,
				Required:    true,
				Computed:    false,
				ForceNew:    true,
				Description: "The plugin identifier of the authorization plugin.",
			},
			"allow_only_known_users_to_login": {
				Type:        schema.TypeBool,
				Optional:    true,
				Computed:    false,
				ForceNew:    true,
				Description: "Allow only those users to login who have explicitly been added by an administrator.",
			},
			"properties": propertiesSchemaResource(),
			"etag": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				ForceNew:    false,
				Description: "Etag used to track the authorisation configuration.",
			},
		},
		Importer: &schema.ResourceImporter{
			StateContext: resourceAuthConfigImport,
		},
	}
}

func resourceAuthConfigCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	defaultConfig := meta.(gocd.GoCd)

	if d.IsNewResource() {
		id := d.Id()

		if len(id) == 0 {
			resourceID := utils.String(d.Get(utils.TerraformResourceProfileID))
			id = resourceID
		}

		cfg := gocd.CommonConfig{
			ID:                  utils.String(d.Get(utils.TerraformResourceProfileID)),
			PluginID:            utils.String(d.Get(utils.TerraformResourcePluginID)),
			Properties:          getPluginConfiguration(d.Get(utils.TerraformResourceProperties)),
			AllowOnlyKnownUsers: utils.Bool(d.Get(utils.TerraformResourceAllowKnownUser)),
		}

		_, err := defaultConfig.CreateAuthConfig(cfg)
		if err != nil {
			return diag.Errorf("creating auth configuration %s errored with %v", cfg.ID, err)
		}

		d.SetId(id)

		return resourceAuthConfigRead(ctx, d, meta)
	}

	return nil
}

func resourceAuthConfigRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	defaultConfig := meta.(gocd.GoCd)

	profileID := utils.String(d.Get(utils.TerraformResourceProfileID))
	response, err := defaultConfig.GetAuthConfig(profileID)
	if err != nil {
		return diag.Errorf("getting auth configuration %s errored with: %v", profileID, err)
	}

	if err = d.Set(utils.TerraformResourceEtag, response.ETAG); err != nil {
		return diag.Errorf(settingAttrErrorTmp, utils.TerraformResourceEtag, err)
	}

	return nil
}

func resourceAuthConfigUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	defaultConfig := meta.(gocd.GoCd)

	if !d.HasChange(utils.TerraformResourceProperties) {
		log.Printf("nothing to update so skipping")

		return nil
	}

	cfg := gocd.CommonConfig{
		ID:                  utils.String(d.Get(utils.TerraformResourceProfileID)),
		PluginID:            utils.String(d.Get(utils.TerraformResourcePluginID)),
		Properties:          getPluginConfiguration(d.Get(utils.TerraformResourceProperties)),
		AllowOnlyKnownUsers: utils.Bool(d.Get(utils.TerraformResourceAllowKnownUser)),
		ETAG:                utils.String(d.Get(utils.TerraformResourceEtag)),
	}

	_, err := defaultConfig.UpdateAuthConfig(cfg)
	if err != nil {
		return diag.Errorf("updating auth configuration %s errored with: %v", cfg.ID, err)
	}

	return resourceAuthConfigRead(ctx, d, meta)
}

func resourceAuthConfigDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	defaultConfig := meta.(gocd.GoCd)

	id := d.Id()
	if len(d.Id()) == 0 {
		return diag.Errorf("resource with the ID '%s' not found", id)
	}

	profileID := utils.String(d.Get(utils.TerraformResourceProfileID))

	err := defaultConfig.DeleteAuthConfig(profileID)
	if err != nil {
		return diag.Errorf("deleting auth configuration %s errored with: %v", profileID, err)
	}

	d.SetId("")

	return nil
}

func resourceAuthConfigImport(ctx context.Context, d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	defaultConfig := meta.(gocd.GoCd)

	profileID := utils.String(d.Id())
	response, err := defaultConfig.GetAuthConfig(profileID)
	if err != nil {
		return nil, fmt.Errorf("getting auth configuration %s errored with: %w", profileID, err)
	}

	if err = d.Set(utils.TerraformResourceClusterProfileID, profileID); err != nil {
		return nil, fmt.Errorf(settingAttrErrorTmp, err, utils.TerraformResourceStoreID)
	}

	if err = d.Set(utils.TerraformResourcePluginID, response.PluginID); err != nil {
		return nil, fmt.Errorf(settingAttrErrorTmp, err, utils.TerraformResourcePluginID)
	}

	if err = d.Set(utils.TerraformResourceAllowKnownUser, response.AllowOnlyKnownUsers); err != nil {
		return nil, fmt.Errorf(settingAttrErrorTmp, err, utils.TerraformResourceAllowKnownUser)
	}

	flattenedProperties, err := utils.MapSlice(response.Properties)
	if err != nil {
		d.SetId("")

		return nil, fmt.Errorf("errored while flattening artifact store properties obtained: %w", err)
	}

	if err = d.Set(utils.TerraformResourceProperties, flattenedProperties); err != nil {
		return nil, fmt.Errorf(settingAttrErrorTmp, err, utils.TerraformResourceProperties)
	}

	if err = d.Set(utils.TerraformResourceEtag, response.ETAG); err != nil {
		return nil, fmt.Errorf(settingAttrErrorTmp, utils.TerraformResourceEtag, err)
	}

	return []*schema.ResourceData{d}, nil
}
